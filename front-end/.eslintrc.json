{
    "root": true,
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "jquery": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
    ],
    "settings": {
        "react": {
            "pragma": "React",
            "version": "18.2.0"
        }
    },
    "plugins": ["react", "react-hooks", "@typescript-eslint"],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "requireConfigFile": false,
        "sourceType": "module"
    },
    "rules": {
        "indent": "off",
        "no-multi-spaces": ["error"],
        "quote-props": ["error", "consistent-as-needed"],
        "keyword-spacing": ["error"],
        "arrow-spacing": ["error"],
        "arrow-parens": ["error", "as-needed"],
        "comma-spacing": ["error"],
        "array-bracket-spacing": ["error"],
        "camelcase": [
            "error",
            {
                "properties": "never"
            }
        ],
        "key-spacing": ["error"],
        "brace-style": [
            "error",
            "1tbs",
            {
                "allowSingleLine": true
            }
        ],
        "object-curly-spacing": ["error", "always"],
        "space-in-parens": ["error"],
        "implicit-arrow-linebreak": "off",
        "no-var": ["error"],
        "require-await": ["error"],
        "no-new-object": ["error"],
        "no-new-func": ["error"],
        "multiline-ternary": ["error", "always-multiline"],
        "no-unneeded-ternary": ["error"],
        "object-shorthand": ["error"],
        "prefer-rest-params": ["error"],
        "prefer-const": ["error"],
        "prefer-arrow-callback": ["error"],
        "prefer-spread": ["error"],
        "prefer-destructuring": [
            "error",
            {
                "VariableDeclarator": {
                    "array": true,
                    "object": true
                },
                "AssignmentExpression": {
                    "array": false,
                    "object": false
                }
            }
        ],
        "no-useless-return": ["error"],
        "no-script-url": ["error"],
        "no-restricted-properties": ["error"],
        "complexity": ["error"],
        "guard-for-in": ["error"],
        "no-else-return": ["error"],
        "space-infix-ops": ["error", { "int32Hint": false }],
        "no-whitespace-before-property": ["error"],
        "space-before-blocks": ["error"],
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "never",
                "named": "never",
                "asyncArrow": "always"
            }
        ],
        "no-console": "off",
        "eqeqeq": ["error", "smart"],
        "no-duplicate-imports": ["error"],
        "no-div-regex": ["error"],
        "no-extra-label": ["error"],
        "semi-spacing": ["error"],
        "valid-typeof": ["error"],
        "unicode-bom": ["error"],
        "spaced-comment": ["error"],
        "no-trailing-spaces": ["error"],
        "func-call-spacing": ["error", "never"],
        "no-label-var": ["error"],
        "no-unused-expressions": [
            "error",
            {
                "allowShortCircuit": true,
                "allowTernary": true
            }
        ],
        "no-useless-computed-key": ["error"],
        "no-useless-concat": ["error"],
        "no-proto": ["error"],
        "no-self-compare": ["error"],
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 1
            }
        ],
        "linebreak-style": ["error", "unix"],
        "quotes": ["error", "double"],
        "semi": ["error", "always"],
        "react/display-name": ["off"],
        "react/boolean-prop-naming": [
            "error",
            {
                "rule": "^(required$|(use|is|has|hide|show|with)[A-Z]([A-Za-z0-9]?)+)"
            }
        ],
        "react/no-danger-with-children": ["error"],
        "react/no-deprecated": ["error"],
        "react/no-did-mount-set-state": ["error"],
        "react/no-did-update-set-state": ["error"],
        "react/no-direct-mutation-state": ["error"],
        "react/no-find-dom-node": ["error"],
        "react/no-is-mounted": ["error"],
        "react/no-multi-comp": ["error", { "ignoreStateless": true }],
        "react/no-typos": ["error"],
        "react/no-string-refs": ["error"],
        "react/no-this-in-sfc": ["error"],
        "react/no-unknown-property": ["error"],
        "react/no-unused-prop-types": ["error"],
        "react/no-unused-state": ["error"],
        "react/no-will-update-set-state": ["error"],
        "react/prop-types": ["error"],
        "react/react-in-jsx-scope": ["off"],
        "react/sort-prop-types": ["error"],
        "react/jsx-indent": "off",
        "react/jsx-indent-props": "off",
        "react/self-closing-comp": ["error"],
        "react/require-render-return": ["error"],
        "react/no-access-state-in-setstate": ["error"],
        "react/no-array-index-key": ["error"],
        "react/no-children-prop": ["off"],
        "react/no-danger": ["error"],
        "react/no-render-return-value": ["error"],
        "react/sort-comp": [
            "error",
            {
                "groups": {
                    "lifecycle": [
                        "displayName",
                        "propTypes",
                        "contextTypes",
                        "childContextTypes",
                        "mixins",
                        "statics",
                        "defaultProps",
                        "type-annotations",
                        "state",
                        "instance-variables",
                        "getters",
                        "setters",
                        "constructor",
                        "getDefaultProps",
                        "getInitialState",
                        "getChildContext",
                        "getDerivedStateFromProps",
                        "componentWillMount",
                        "UNSAFE_componentWillMount",
                        "componentDidMount",
                        "componentWillReceiveProps",
                        "UNSAFE_componentWillReceiveProps",
                        "shouldComponentUpdate",
                        "componentWillUpdate",
                        "UNSAFE_componentWillUpdate",
                        "getSnapshotBeforeUpdate",
                        "componentDidUpdate",
                        "componentDidCatch",
                        "componentWillUnmount"
                    ]
                }
            }
        ],
        "react/style-prop-object": ["error"],
        "react/void-dom-elements-no-children": ["error"],
        "react/jsx-child-element-spacing": ["error"],
        "react/jsx-closing-bracket-location": ["error", "line-aligned"],
        "react/jsx-closing-tag-location": ["error"],
        "react/jsx-curly-spacing": ["error", { "when": "never" }],
        "react/jsx-equals-spacing": ["error", "never"],
        "react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
        "react/jsx-handler-names": ["error"],
        "react/jsx-key": ["error"],
        "react/jsx-curly-brace-presence": [
            "error",
            { "props": "never", "children": "ignore" }
        ],
        "react/jsx-pascal-case": ["error", { "allowAllCaps": true }],
        "react/jsx-tag-spacing": [
            "error",
            {
                "beforeSelfClosing": "always"
            }
        ],
        "react/jsx-no-target-blank": ["error"],
        "react/jsx-wrap-multilines": [
            "error",
            {
                "declaration": "ignore",
                "assignment": "ignore",
                "arrow": "parens-new-line",
                "condition": "parens-new-line",
                "logical": "parens-new-line",
                "prop": "ignore",
                "return": "parens-new-line"
            }
        ],
        "react/jsx-no-duplicate-props": ["error"],
        "react/jsx-boolean-value": ["error"],
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "off"
    }
}
